{
  "address": "0xc8E70D869dE3Fc32924b709DdfE8674165d9D2da",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "base64gm",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateGM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gmsSaidBack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sayGM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "sayGMBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55acb1e696ae7ec4e4ce1f4e8e2a33ea01373ac2270d26c77a498b9ad6a09f83",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2164762",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x374da77a0d8dfecf9dacc31e43806d24808e15c86d5ef368ba6fe4ac31e6c7e1",
    "transactionHash": "0x55acb1e696ae7ec4e4ce1f4e8e2a33ea01373ac2270d26c77a498b9ad6a09f83",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "2164762",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1a36c5540a9f87063b96581dc75e5166",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"base64gm\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateGM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gmsSaidBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sayGM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sayGMBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\":   @ bretth18 / @ computerdata\",\"details\":\":   This contract requires you to say GM before minting.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\":   \\\"GMPass\\\"\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"______   __       __  _______                               /      \\\\ /  \\\\     /  |/       \\\\                              /$$$$$$  |$$  \\\\   /$$ |$$$$$$$  | ______    _______  _______  $$ | _$$/ $$$  \\\\ /$$$ |$$ |__$$ |/      \\\\  /       |/       | $$ |/    |$$$$  /$$$$ |$$    $$/ $$$$$$  |/$$$$$$$//$$$$$$$/  $$ |$$$$ |$$ $$ $$/$$ |$$$$$$$/  /    $$ |$$      \\\\$$      \\\\  $$ \\\\__$$ |$$ |$$$/ $$ |$$ |     /$$$$$$$ | $$$$$$  |$$$$$$  | $$    $$/ $$ | $/  $$ |$$ |     $$    $$ |/     $$//     $$/  $$$$$$/  $$/      $$/ $$/       $$$$$$$/ $$$$$$$/ $$$$$$$/   ------------------------------------------------------------------------------------------------- \\\"GMPass\\\"                :   ERC-721 for saying gm \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GMPass.sol\":\"GMPass\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/GMPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\n\\npragma solidity ^0.8.4;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./utils/base64.sol\\\";\\n\\n\\n\\n\\n/*\\n    Lifted from NateAlex's SquiggleWTF project.\\n    https://etherscan.io/address/0x36f379400de6c6bcdf4408b282f8b685c56adc60#code\\n*/\\nlibrary Buffer {\\n    function hasCapacityFor(bytes memory buffer, uint256 needed) internal pure returns (bool) {\\n        uint256 size;\\n        uint256 used;\\n        assembly {\\n            size := mload(buffer)\\n            used := mload(add(buffer, 32))\\n        }\\n        return size >= 32 && used <= size - 32 && used + needed <= size - 32;\\n    }\\n    \\n    function toString(bytes memory buffer) internal pure returns (string memory) {\\n        require(hasCapacityFor(buffer, 0), \\\"Buffer.toString: invalid buffer\\\");\\n        string memory ret;\\n        assembly {\\n            ret := add(buffer, 32)\\n        }\\n        return ret;\\n    }\\n    \\n    function append(bytes memory buffer, string memory str) internal view {\\n        require(hasCapacityFor(buffer, bytes(str).length), \\\"Buffer.append: no capacity\\\");\\n        assembly {\\n            let len := mload(add(buffer, 32))\\n            pop(staticcall(gas(), 0x4, add(str, 32), mload(str), add(len, add(buffer, 64)), mload(str)))\\n            mstore(add(buffer, 32), add(len, mload(str)))\\n        }\\n    }\\n}\\n\\n/*\\n    OpenZeppelin source.\\n    https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\\n*/\\nlibrary HexString {\\n\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(length);\\n        for (uint256 i = 0; i < length; i++) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n}\\n\\n\\n/**\\n\\n    ______   __       __  _______                              \\n    /      \\\\ /  \\\\     /  |/       \\\\                             \\n    /$$$$$$  |$$  \\\\   /$$ |$$$$$$$  | ______    _______  _______ \\n    $$ | _$$/ $$$  \\\\ /$$$ |$$ |__$$ |/      \\\\  /       |/       |\\n    $$ |/    |$$$$  /$$$$ |$$    $$/ $$$$$$  |/$$$$$$$//$$$$$$$/ \\n    $$ |$$$$ |$$ $$ $$/$$ |$$$$$$$/  /    $$ |$$      \\\\$$      \\\\ \\n    $$ \\\\__$$ |$$ |$$$/ $$ |$$ |     /$$$$$$$ | $$$$$$  |$$$$$$  |\\n    $$    $$/ $$ | $/  $$ |$$ |     $$    $$ |/     $$//     $$/ \\n    $$$$$$/  $$/      $$/ $$/       $$$$$$$/ $$$$$$$/ $$$$$$$/  \\n                                                                \\n                                                                \\n    -------------------------------------------------------------------------------------------------\\n    \\\"GMPass\\\"                :   ERC-721 for saying gm \\n                                \\n\\n    @author                 :   @ bretth18 / @ computerdata\\n    @title                  :   \\\"GMPass\\\"\\n\\n    @dev                    :   This contract requires you to say GM before minting.\\n                      \\n */\\ncontract GMPass is ERC721Enumerable {\\n\\n    // mapping our GM's\\n    mapping (address => uint256) gms;\\n\\n    mapping (uint => uint) public gmsSaidBack;\\n\\n\\n    modifier say_gm() {\\n        require(block.timestamp - gms[msg.sender] <= 1 days, \\\"say gm please\\\");\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"GMPass_v1\\\", \\\"GMGMGM\\\"){\\n    }\\n\\n\\n    // gm function\\n    function gm() public {\\n        gms[msg.sender] = block.timestamp;\\n    }\\n\\n    \\n    function sayGM() public say_gm {\\n        _safeMint(msg.sender, totalSupply());\\n    }\\n\\n\\n    function sayGMBack(uint256 tokenId) public say_gm {\\n        _safeMint(msg.sender, totalSupply());\\n        gmsSaidBack[tokenId] += 1;\\n    }\\n\\n\\n\\n    function getColor(uint256 tokenId) public pure  returns (string memory) {\\n\\n        uint a = uint256(keccak256(abi.encodePacked(tokenId)));\\n        uint value = uint256(a%uint256(15728640))+uint(1048576);\\n\\n        return HexString.toHexString(value, 6);\\n    }\\n\\n\\n    function generateGM(uint256 tokenId) public view returns (string memory) {\\n\\n        // get our \\\"random\\\" color\\n        string memory color = getColor(tokenId);\\n\\n        // create new memory buffer to encode our SVG\\n        bytes memory buffer = new bytes(1000);\\n\\n        // 0: GM said back indicator\\n        Buffer.append(buffer,'<svg width=\\\"800\\\" height=\\\"600\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 800 600\\\"><g>');\\n        Buffer.append(buffer, '<text style=\\\"cursor: move;font-style:bold;font-weight:bold;\\\" xml:space=\\\"preserve\\\" text-anchor=\\\"start\\\" font-family=\\\"Helvetica\\\" ');\\n        Buffer.append(buffer, 'font-size=\\\"24\\\" id=\\\"svg_2\\\" y=\\\"40\\\" x=\\\"21\\\" stroke-width=\\\"1px\\\" stroke=\\\"white\\\" stroke-linecap=\\\"butt\\\" stoke-linejoin=\\\"miter\\\" fill=\\\"#000000\\\">gm said back:   </text>');\\n        Buffer.append(buffer, '<text xml:space=\\\"preserve\\\" text-anchor=\\\"start\\\" font-family=\\\"Helvetica\\\" font-size=\\\"24\\\" id=\\\"svg_3\\\" y=\\\"41\\\" x=\\\"180\\\" ');\\n        Buffer.append(buffer, 'stroke-width=\\\"1px\\\" stroke=\\\"white\\\" stroke-linecap=\\\"butt\\\" stoke-linejoin=\\\"miter\\\" fill=\\\"#000000\\\">');\\n        Buffer.append(buffer, HexString.toString(gmsSaidBack[tokenId]));\\n        Buffer.append(buffer, '</text>');\\n\\n        // 1: gm \\n        Buffer.append(buffer, '<text transform=\\\"matrix(2.1102, 0, 0, 2.68, -1069.82, -1177.68)\\\" xml:space=\\\"preserve\\\" text-anchor=\\\"start\\\" ');\\n        Buffer.append(buffer, 'font-family=\\\"Helvetica\\\" font-weight=\\\"bold\\\" font-size=\\\"100\\\" stroke-width=\\\"0\\\" id=\\\"svg_1\\\" y=\\\"578.61194\\\" x=\\\"617.27681\\\" stroke=\\\"#000\\\" fill=\\\"#');\\n        Buffer.append(buffer, color);\\n        Buffer.append(buffer, '\\\">GM</text></g></svg>');\\n\\n        return Buffer.toString(buffer);\\n\\n    }\\n\\n\\n    function base64gm(uint256 tokenId) public view returns (string memory) {\\n        return Base64.encode(bytes(generateGM(tokenId)));\\n    }\\n\\n\\n    // token URI function returns encoded SVG\\n    function tokenURI(uint256 tokenId) public override(ERC721) view returns (string memory) {\\n\\n        return string(\\n            abi.encodePacked(\\n                'data:application/json;base64,', Base64.encode(\\n                    bytes(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"gm #',\\n\\n                            HexString.toString(tokenId),\\n                            '\\\",'\\n                            '\\\"description\\\":\\\"good morning! say it back please\\\",',\\n                            '\\\"attributes\\\" : [{\\\"trait_type\\\":\\\"gms said back\\\", \\\"value\\\":',\\n\\n                            HexString.toString(gmsSaidBack[tokenId]),\\n                            '}, {\\\"display_type\\\": \\\"boost_number\\\", \\\"trait_type\\\":\\\"gm power\\\", \\\"value\\\":',\\n                            HexString.toString(gmsSaidBack[tokenId]),\\n                            '}],'\\n                            '\\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                            base64gm(tokenId),\\n                            '\\\"}'\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n\\n\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x7df11e675c920456ef7de5f10bab1755e2112bc9ad74dac2ce25ac2d759569a9\",\"license\":\"MIT\"},\"contracts/utils/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\",\"keccak256\":\"0x86bb776e93cc2b6aa6820269794e018f92a7d4a6f58dce7c3e1c4aa05889b8a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805180820182526009815268474d506173735f763160b81b602080830191825283518085019094526006845265474d474d474d60d01b908401528151919291620000619160009162000080565b5080516200007790600190602084019062000080565b50505062000163565b8280546200008e9062000126565b90600052602060002090601f016020900481019282620000b25760008555620000fd565b82601f10620000cd57805160ff1916838001178555620000fd565b82800160010185558215620000fd579182015b82811115620000fd578251825591602001919060010190620000e0565b506200010b9291506200010f565b5090565b5b808211156200010b576000815560010162000110565b600181811c908216806200013b57607f821691505b602082108114156200015d57634e487b7160e01b600052602260045260246000fd5b50919050565b61253580620001736000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80634f6ccce7116100c3578063b88d4fde1161007c578063b88d4fde146102c0578063bb899535146102d3578063c0129d43146102e6578063c87b56dd146102fd578063dd36c11114610310578063e985e9c51461032357600080fd5b80634f6ccce7146102595780636352211e1461026c57806370a082311461027f57806380057b9a1461029257806395d89b41146102a5578063a22cb465146102ad57600080fd5b806318160ddd1161011557806318160ddd146101fd5780631f3177021461020557806323b872dd14610218578063254069031461022b5780632f745c591461023357806342842e0e1461024657600080fd5b806301ffc9a71461015257806306fdde031461017a578063081812fc1461018f578063095ea7b3146101ba578063112b13f3146101cf575b600080fd5b610165610160366004611ca1565b61035f565b60405190151581526020015b60405180910390f35b61018261038a565b6040516101719190611f56565b6101a261019d366004611cd9565b61041c565b6040516001600160a01b039091168152602001610171565b6101cd6101c8366004611c78565b6104b6565b005b6101ef6101dd366004611cd9565b600b6020526000908152604090205481565b604051908152602001610171565b6008546101ef565b6101cd610213366004611cd9565b6105cc565b6101cd610226366004611b2e565b610662565b6101cd610693565b6101ef610241366004611c78565b6106ff565b6101cd610254366004611b2e565b610795565b6101ef610267366004611cd9565b6107b0565b6101a261027a366004611cd9565b610851565b6101ef61028d366004611ae2565b6108c8565b6101826102a0366004611cd9565b61094f565b6101826109b2565b6101cd6102bb366004611c3e565b6109c1565b6101cd6102ce366004611b69565b610a86565b6101826102e1366004611cd9565b610abe565b6101cd336000908152600a60205260409020429055565b61018261030b366004611cd9565b610c77565b61018261031e366004611cd9565b610d0b565b610165610331366004611afc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610384575061038482610d1e565b92915050565b6060600080546103999061209a565b80601f01602080910402602001604051908101604052809291908181526020018280546103c59061209a565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661049a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104c182610851565b9050806001600160a01b0316836001600160a01b0316141561052f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610491565b336001600160a01b038216148061054b575061054b8133610331565b6105bd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610491565b6105c78383610d6e565b505050565b336000908152600a602052604090205462015180906105eb9042612057565b11156106295760405162461bcd60e51b815260206004820152600d60248201526c73617920676d20706c6561736560981b6044820152606401610491565b61063b3361063660085490565b610ddc565b6000818152600b6020526040812080546001929061065a90849061200c565b909155505050565b61066c3382610dfa565b6106885760405162461bcd60e51b815260040161049190611fbb565b6105c7838383610eed565b336000908152600a602052604090205462015180906106b29042612057565b11156106f05760405162461bcd60e51b815260206004820152600d60248201526c73617920676d20706c6561736560981b6044820152606401610491565b6106fd3361063660085490565b565b600061070a836108c8565b821061076c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610491565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6105c783838360405180602001604052806000815250610a86565b60006107bb60085490565b821061081e5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610491565b6008828154811061083f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610491565b60006001600160a01b0382166109335760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610491565b506001600160a01b031660009081526003602052604090205490565b606060008260405160200161096691815260200190565b60408051601f198184030181529190528051602090910120905060006210000061099362f00000846120f0565b61099d919061200c565b90506109aa816006611098565b949350505050565b6060600180546103999061209a565b6001600160a01b038216331415610a1a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610491565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610a903383610dfa565b610aac5760405162461bcd60e51b815260040161049190611fbb565b610ab8848484846111db565b50505050565b60606000610acb8361094f565b604080516103e8808252610420820190925291925060009190602082018180368337019050509050610b15816040518060c00160405280608581526020016123896085913961120e565b610b37816040518060a00160405280607e81526020016121fd607e913961120e565b610b59816040518060c00160405280609d8152602001612160609d913961120e565b610b7b816040518060a001604052806070815260200161227b6070913961120e565b610b9d816040518060800160405280605e815260200161232b605e913961120e565b6000848152600b6020526040902054610bc0908290610bbb90611289565b61120e565b610be981604051806040016040528060078152602001661e17ba32bc3a1f60c91b81525061120e565b610c0b816040518060a00160405280606a8152602001612496606a913961120e565b610c2d816040518060c001604052806088815260200161240e6088913961120e565b610c37818361120e565b610c6e8160405180604001604052806015815260200174111f23a69e17ba32bc3a1f1e17b39f1e17b9bb339f60591b81525061120e565b6109aa816113a3565b6060610ce5610c8583611289565b6000848152600b6020526040902054610c9d90611289565b6000858152600b6020526040902054610cb590611289565b610cbe86610d0b565b604051602001610cd19493929190611d39565b604051602081830303815290604052611403565b604051602001610cf59190611ed4565b6040516020818303038152906040529050919050565b6060610384610d1983610abe565b611403565b60006001600160e01b031982166380ac58cd60e01b1480610d4f57506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b0319831614610384565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610da382610851565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610df6828260405180602001604052806000815250611579565b5050565b6000818152600260205260408120546001600160a01b0316610e735760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610491565b6000610e7e83610851565b9050806001600160a01b0316846001600160a01b03161480610eb95750836001600160a01b0316610eae8461041c565b6001600160a01b0316145b806109aa57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166109aa565b826001600160a01b0316610f0082610851565b6001600160a01b031614610f685760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610491565b6001600160a01b038216610fca5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610491565b610fd58383836115ac565b610fe0600082610d6e565b6001600160a01b0383166000908152600360205260408120805460019290611009908490612057565b90915550506001600160a01b038216600090815260036020526040812080546001929061103790849061200c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b606060008267ffffffffffffffff8111156110c357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110ed576020820181803683370190505b50905060005b83811015611185576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061113157634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061115557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c938061117d816120d5565b9150506110f3565b5083156111d45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610491565b9392505050565b6111e6848484610eed565b6111f284848484611664565b610ab85760405162461bcd60e51b815260040161049190611f69565b611219828251611771565b6112655760405162461bcd60e51b815260206004820152601a60248201527f4275666665722e617070656e643a206e6f2063617061636974790000000000006044820152606401610491565b6020820151815160408401820183516020850160045afa5090510160209190910152565b6060816112ad5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112d757806112c1816120d5565b91506112d09050600a83612024565b91506112b1565b60008167ffffffffffffffff81111561130057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561132a576020820181803683370190505b5090505b84156109aa5761133f600183612057565b915061134c600a866120f0565b61135790603061200c565b60f81b81838151811061137a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061139c600a86612024565b945061132e565b60606113b0826000611771565b6113fc5760405162461bcd60e51b815260206004820152601f60248201527f4275666665722e746f537472696e673a20696e76616c696420627566666572006044820152606401610491565b5060200190565b606081516000141561142357505060408051602081019091526000815290565b60006040518060600160405280604081526020016122eb6040913990506000600384516002611452919061200c565b61145c9190612024565b611467906004612038565b9050600061147682602061200c565b67ffffffffffffffff81111561149c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156114c6576020820181803683370190505b509050818152600183018586518101602084015b818310156115345760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016114da565b60038951066001811461154e576002811461155f5761156b565b613d3d60f01b60011983015261156b565b603d60f81b6000198301525b509398975050505050505050565b61158383836117be565b6115906000848484611664565b6105c75760405162461bcd60e51b815260040161049190611f69565b6001600160a01b0383166116075761160281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61162a565b816001600160a01b0316836001600160a01b03161461162a5761162a838261190c565b6001600160a01b038216611641576105c7816119a9565b826001600160a01b0316826001600160a01b0316146105c7576105c78282611a82565b60006001600160a01b0384163b1561176657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906116a8903390899088908890600401611f19565b602060405180830381600087803b1580156116c257600080fd5b505af19250505080156116f2575060408051601f3d908101601f191682019092526116ef91810190611cbd565b60015b61174c573d808015611720576040519150601f19603f3d011682016040523d82523d6000602084013e611725565b606091505b5080516117445760405162461bcd60e51b815260040161049190611f69565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109aa565b506001949350505050565b81516020808401516000929182108015906117965750611792602083612057565b8111155b80156117b557506117a8602083612057565b6117b2858361200c565b11155b95945050505050565b6001600160a01b0382166118145760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610491565b6000818152600260205260409020546001600160a01b0316156118795760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610491565b611885600083836115ac565b6001600160a01b03821660009081526003602052604081208054600192906118ae90849061200c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611919846108c8565b6119239190612057565b600083815260076020526040902054909150808214611976576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906119bb90600190612057565b600083815260096020526040812054600880549394509092849081106119f157634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110611a2057634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611a6657634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000611a8d836108c8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b80356001600160a01b0381168114611add57600080fd5b919050565b600060208284031215611af3578081fd5b6111d482611ac6565b60008060408385031215611b0e578081fd5b611b1783611ac6565b9150611b2560208401611ac6565b90509250929050565b600080600060608486031215611b42578081fd5b611b4b84611ac6565b9250611b5960208501611ac6565b9150604084013590509250925092565b60008060008060808587031215611b7e578081fd5b611b8785611ac6565b9350611b9560208601611ac6565b925060408501359150606085013567ffffffffffffffff80821115611bb8578283fd5b818701915087601f830112611bcb578283fd5b813581811115611bdd57611bdd612130565b604051601f8201601f19908116603f01168101908382118183101715611c0557611c05612130565b816040528281528a6020848701011115611c1d578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215611c50578182fd5b611c5983611ac6565b915060208301358015158114611c6d578182fd5b809150509250929050565b60008060408385031215611c8a578182fd5b611c9383611ac6565b946020939093013593505050565b600060208284031215611cb2578081fd5b81356111d481612146565b600060208284031215611cce578081fd5b81516111d481612146565b600060208284031215611cea578081fd5b5035919050565b60008151808452611d0981602086016020860161206e565b601f01601f19169290920160200192915050565b60008151611d2f81856020860161206e565b9290920192915050565b6c7b226e616d65223a22676d202360981b81528451600090611d6281600d850160208a0161206e565b7f222c226465736372697074696f6e223a22676f6f64206d6f726e696e67212073600d9184019182015272185e481a5d08189858dac81c1b19585cd9488b606a1b602d8201527f226174747269627574657322203a205b7b2274726169745f74797065223a226760408201527f6d732073616964206261636b222c202276616c7565223a00000000000000000060608201528551611e07816077840160208a0161206e565b7f7d2c207b22646973706c61795f74797065223a2022626f6f73745f6e756d6265607792909101918201527f72222c202274726169745f74797065223a22676d20706f776572222c20227661609782015264363ab2911d60d91b60b7820152611ec9611ebb611eb5611e7c60bc850189611d1d565b7f7d5d2c22696d616765223a2022646174613a696d6167652f7376672b786d6c3b81526618985cd94d8d0b60ca1b602082015260270190565b86611d1d565b61227d60f01b815260020190565b979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611f0c81601d85016020870161206e565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611f4c90830184611cf1565b9695505050505050565b6020815260006111d46020830184611cf1565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561201f5761201f612104565b500190565b6000826120335761203361211a565b500490565b600081600019048311821515161561205257612052612104565b500290565b60008282101561206957612069612104565b500390565b60005b83811015612089578181015183820152602001612071565b83811115610ab85750506000910152565b600181811c908216806120ae57607f821691505b602082108114156120cf57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156120e9576120e9612104565b5060010190565b6000826120ff576120ff61211a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461215c57600080fd5b5056fe666f6e742d73697a653d223234222069643d227376675f322220793d2234302220783d22323122207374726f6b652d77696474683d2231707822207374726f6b653d22776869746522207374726f6b652d6c696e656361703d2262757474222073746f6b652d6c696e656a6f696e3d226d69746572222066696c6c3d2223303030303030223e676d2073616964206261636b3a2020203c2f746578743e3c74657874207374796c653d22637572736f723a206d6f76653b666f6e742d7374796c653a626f6c643b666f6e742d7765696768743a626f6c643b2220786d6c3a73706163653d2270726573657276652220746578742d616e63686f723d2273746172742220666f6e742d66616d696c793d2248656c76657469636122203c7465787420786d6c3a73706163653d2270726573657276652220746578742d616e63686f723d2273746172742220666f6e742d66616d696c793d2248656c7665746963612220666f6e742d73697a653d223234222069643d227376675f332220793d2234312220783d2231383022204142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f7374726f6b652d77696474683d2231707822207374726f6b653d22776869746522207374726f6b652d6c696e656361703d2262757474222073746f6b652d6c696e656a6f696e3d226d69746572222066696c6c3d2223303030303030223e3c7376672077696474683d2238303022206865696768743d223630302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b222076696577426f783d223020302038303020363030223e3c673e666f6e742d66616d696c793d2248656c7665746963612220666f6e742d7765696768743d22626f6c642220666f6e742d73697a653d2231303022207374726f6b652d77696474683d2230222069643d227376675f312220793d223537382e36313139342220783d223631372e323736383122207374726f6b653d2223303030222066696c6c3d22233c74657874207472616e73666f726d3d226d617472697828322e313130322c20302c20302c20322e36382c202d313036392e38322c202d313137372e3638292220786d6c3a73706163653d2270726573657276652220746578742d616e63686f723d2273746172742220a2646970667358221220712e8f7b129d423ef92bdda7c692532e291e4fb27374364f95157f7004f1d39764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80634f6ccce7116100c3578063b88d4fde1161007c578063b88d4fde146102c0578063bb899535146102d3578063c0129d43146102e6578063c87b56dd146102fd578063dd36c11114610310578063e985e9c51461032357600080fd5b80634f6ccce7146102595780636352211e1461026c57806370a082311461027f57806380057b9a1461029257806395d89b41146102a5578063a22cb465146102ad57600080fd5b806318160ddd1161011557806318160ddd146101fd5780631f3177021461020557806323b872dd14610218578063254069031461022b5780632f745c591461023357806342842e0e1461024657600080fd5b806301ffc9a71461015257806306fdde031461017a578063081812fc1461018f578063095ea7b3146101ba578063112b13f3146101cf575b600080fd5b610165610160366004611ca1565b61035f565b60405190151581526020015b60405180910390f35b61018261038a565b6040516101719190611f56565b6101a261019d366004611cd9565b61041c565b6040516001600160a01b039091168152602001610171565b6101cd6101c8366004611c78565b6104b6565b005b6101ef6101dd366004611cd9565b600b6020526000908152604090205481565b604051908152602001610171565b6008546101ef565b6101cd610213366004611cd9565b6105cc565b6101cd610226366004611b2e565b610662565b6101cd610693565b6101ef610241366004611c78565b6106ff565b6101cd610254366004611b2e565b610795565b6101ef610267366004611cd9565b6107b0565b6101a261027a366004611cd9565b610851565b6101ef61028d366004611ae2565b6108c8565b6101826102a0366004611cd9565b61094f565b6101826109b2565b6101cd6102bb366004611c3e565b6109c1565b6101cd6102ce366004611b69565b610a86565b6101826102e1366004611cd9565b610abe565b6101cd336000908152600a60205260409020429055565b61018261030b366004611cd9565b610c77565b61018261031e366004611cd9565b610d0b565b610165610331366004611afc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610384575061038482610d1e565b92915050565b6060600080546103999061209a565b80601f01602080910402602001604051908101604052809291908181526020018280546103c59061209a565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661049a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104c182610851565b9050806001600160a01b0316836001600160a01b0316141561052f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610491565b336001600160a01b038216148061054b575061054b8133610331565b6105bd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610491565b6105c78383610d6e565b505050565b336000908152600a602052604090205462015180906105eb9042612057565b11156106295760405162461bcd60e51b815260206004820152600d60248201526c73617920676d20706c6561736560981b6044820152606401610491565b61063b3361063660085490565b610ddc565b6000818152600b6020526040812080546001929061065a90849061200c565b909155505050565b61066c3382610dfa565b6106885760405162461bcd60e51b815260040161049190611fbb565b6105c7838383610eed565b336000908152600a602052604090205462015180906106b29042612057565b11156106f05760405162461bcd60e51b815260206004820152600d60248201526c73617920676d20706c6561736560981b6044820152606401610491565b6106fd3361063660085490565b565b600061070a836108c8565b821061076c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610491565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6105c783838360405180602001604052806000815250610a86565b60006107bb60085490565b821061081e5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610491565b6008828154811061083f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610491565b60006001600160a01b0382166109335760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610491565b506001600160a01b031660009081526003602052604090205490565b606060008260405160200161096691815260200190565b60408051601f198184030181529190528051602090910120905060006210000061099362f00000846120f0565b61099d919061200c565b90506109aa816006611098565b949350505050565b6060600180546103999061209a565b6001600160a01b038216331415610a1a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610491565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610a903383610dfa565b610aac5760405162461bcd60e51b815260040161049190611fbb565b610ab8848484846111db565b50505050565b60606000610acb8361094f565b604080516103e8808252610420820190925291925060009190602082018180368337019050509050610b15816040518060c00160405280608581526020016123896085913961120e565b610b37816040518060a00160405280607e81526020016121fd607e913961120e565b610b59816040518060c00160405280609d8152602001612160609d913961120e565b610b7b816040518060a001604052806070815260200161227b6070913961120e565b610b9d816040518060800160405280605e815260200161232b605e913961120e565b6000848152600b6020526040902054610bc0908290610bbb90611289565b61120e565b610be981604051806040016040528060078152602001661e17ba32bc3a1f60c91b81525061120e565b610c0b816040518060a00160405280606a8152602001612496606a913961120e565b610c2d816040518060c001604052806088815260200161240e6088913961120e565b610c37818361120e565b610c6e8160405180604001604052806015815260200174111f23a69e17ba32bc3a1f1e17b39f1e17b9bb339f60591b81525061120e565b6109aa816113a3565b6060610ce5610c8583611289565b6000848152600b6020526040902054610c9d90611289565b6000858152600b6020526040902054610cb590611289565b610cbe86610d0b565b604051602001610cd19493929190611d39565b604051602081830303815290604052611403565b604051602001610cf59190611ed4565b6040516020818303038152906040529050919050565b6060610384610d1983610abe565b611403565b60006001600160e01b031982166380ac58cd60e01b1480610d4f57506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b0319831614610384565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610da382610851565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610df6828260405180602001604052806000815250611579565b5050565b6000818152600260205260408120546001600160a01b0316610e735760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610491565b6000610e7e83610851565b9050806001600160a01b0316846001600160a01b03161480610eb95750836001600160a01b0316610eae8461041c565b6001600160a01b0316145b806109aa57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166109aa565b826001600160a01b0316610f0082610851565b6001600160a01b031614610f685760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610491565b6001600160a01b038216610fca5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610491565b610fd58383836115ac565b610fe0600082610d6e565b6001600160a01b0383166000908152600360205260408120805460019290611009908490612057565b90915550506001600160a01b038216600090815260036020526040812080546001929061103790849061200c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b606060008267ffffffffffffffff8111156110c357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110ed576020820181803683370190505b50905060005b83811015611185576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061113157634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061115557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c938061117d816120d5565b9150506110f3565b5083156111d45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610491565b9392505050565b6111e6848484610eed565b6111f284848484611664565b610ab85760405162461bcd60e51b815260040161049190611f69565b611219828251611771565b6112655760405162461bcd60e51b815260206004820152601a60248201527f4275666665722e617070656e643a206e6f2063617061636974790000000000006044820152606401610491565b6020820151815160408401820183516020850160045afa5090510160209190910152565b6060816112ad5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112d757806112c1816120d5565b91506112d09050600a83612024565b91506112b1565b60008167ffffffffffffffff81111561130057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561132a576020820181803683370190505b5090505b84156109aa5761133f600183612057565b915061134c600a866120f0565b61135790603061200c565b60f81b81838151811061137a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061139c600a86612024565b945061132e565b60606113b0826000611771565b6113fc5760405162461bcd60e51b815260206004820152601f60248201527f4275666665722e746f537472696e673a20696e76616c696420627566666572006044820152606401610491565b5060200190565b606081516000141561142357505060408051602081019091526000815290565b60006040518060600160405280604081526020016122eb6040913990506000600384516002611452919061200c565b61145c9190612024565b611467906004612038565b9050600061147682602061200c565b67ffffffffffffffff81111561149c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156114c6576020820181803683370190505b509050818152600183018586518101602084015b818310156115345760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016114da565b60038951066001811461154e576002811461155f5761156b565b613d3d60f01b60011983015261156b565b603d60f81b6000198301525b509398975050505050505050565b61158383836117be565b6115906000848484611664565b6105c75760405162461bcd60e51b815260040161049190611f69565b6001600160a01b0383166116075761160281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61162a565b816001600160a01b0316836001600160a01b03161461162a5761162a838261190c565b6001600160a01b038216611641576105c7816119a9565b826001600160a01b0316826001600160a01b0316146105c7576105c78282611a82565b60006001600160a01b0384163b1561176657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906116a8903390899088908890600401611f19565b602060405180830381600087803b1580156116c257600080fd5b505af19250505080156116f2575060408051601f3d908101601f191682019092526116ef91810190611cbd565b60015b61174c573d808015611720576040519150601f19603f3d011682016040523d82523d6000602084013e611725565b606091505b5080516117445760405162461bcd60e51b815260040161049190611f69565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109aa565b506001949350505050565b81516020808401516000929182108015906117965750611792602083612057565b8111155b80156117b557506117a8602083612057565b6117b2858361200c565b11155b95945050505050565b6001600160a01b0382166118145760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610491565b6000818152600260205260409020546001600160a01b0316156118795760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610491565b611885600083836115ac565b6001600160a01b03821660009081526003602052604081208054600192906118ae90849061200c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611919846108c8565b6119239190612057565b600083815260076020526040902054909150808214611976576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906119bb90600190612057565b600083815260096020526040812054600880549394509092849081106119f157634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110611a2057634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611a6657634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000611a8d836108c8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b80356001600160a01b0381168114611add57600080fd5b919050565b600060208284031215611af3578081fd5b6111d482611ac6565b60008060408385031215611b0e578081fd5b611b1783611ac6565b9150611b2560208401611ac6565b90509250929050565b600080600060608486031215611b42578081fd5b611b4b84611ac6565b9250611b5960208501611ac6565b9150604084013590509250925092565b60008060008060808587031215611b7e578081fd5b611b8785611ac6565b9350611b9560208601611ac6565b925060408501359150606085013567ffffffffffffffff80821115611bb8578283fd5b818701915087601f830112611bcb578283fd5b813581811115611bdd57611bdd612130565b604051601f8201601f19908116603f01168101908382118183101715611c0557611c05612130565b816040528281528a6020848701011115611c1d578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215611c50578182fd5b611c5983611ac6565b915060208301358015158114611c6d578182fd5b809150509250929050565b60008060408385031215611c8a578182fd5b611c9383611ac6565b946020939093013593505050565b600060208284031215611cb2578081fd5b81356111d481612146565b600060208284031215611cce578081fd5b81516111d481612146565b600060208284031215611cea578081fd5b5035919050565b60008151808452611d0981602086016020860161206e565b601f01601f19169290920160200192915050565b60008151611d2f81856020860161206e565b9290920192915050565b6c7b226e616d65223a22676d202360981b81528451600090611d6281600d850160208a0161206e565b7f222c226465736372697074696f6e223a22676f6f64206d6f726e696e67212073600d9184019182015272185e481a5d08189858dac81c1b19585cd9488b606a1b602d8201527f226174747269627574657322203a205b7b2274726169745f74797065223a226760408201527f6d732073616964206261636b222c202276616c7565223a00000000000000000060608201528551611e07816077840160208a0161206e565b7f7d2c207b22646973706c61795f74797065223a2022626f6f73745f6e756d6265607792909101918201527f72222c202274726169745f74797065223a22676d20706f776572222c20227661609782015264363ab2911d60d91b60b7820152611ec9611ebb611eb5611e7c60bc850189611d1d565b7f7d5d2c22696d616765223a2022646174613a696d6167652f7376672b786d6c3b81526618985cd94d8d0b60ca1b602082015260270190565b86611d1d565b61227d60f01b815260020190565b979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611f0c81601d85016020870161206e565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611f4c90830184611cf1565b9695505050505050565b6020815260006111d46020830184611cf1565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561201f5761201f612104565b500190565b6000826120335761203361211a565b500490565b600081600019048311821515161561205257612052612104565b500290565b60008282101561206957612069612104565b500390565b60005b83811015612089578181015183820152602001612071565b83811115610ab85750506000910152565b600181811c908216806120ae57607f821691505b602082108114156120cf57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156120e9576120e9612104565b5060010190565b6000826120ff576120ff61211a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461215c57600080fd5b5056fe666f6e742d73697a653d223234222069643d227376675f322220793d2234302220783d22323122207374726f6b652d77696474683d2231707822207374726f6b653d22776869746522207374726f6b652d6c696e656361703d2262757474222073746f6b652d6c696e656a6f696e3d226d69746572222066696c6c3d2223303030303030223e676d2073616964206261636b3a2020203c2f746578743e3c74657874207374796c653d22637572736f723a206d6f76653b666f6e742d7374796c653a626f6c643b666f6e742d7765696768743a626f6c643b2220786d6c3a73706163653d2270726573657276652220746578742d616e63686f723d2273746172742220666f6e742d66616d696c793d2248656c76657469636122203c7465787420786d6c3a73706163653d2270726573657276652220746578742d616e63686f723d2273746172742220666f6e742d66616d696c793d2248656c7665746963612220666f6e742d73697a653d223234222069643d227376675f332220793d2234312220783d2231383022204142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f7374726f6b652d77696474683d2231707822207374726f6b653d22776869746522207374726f6b652d6c696e656361703d2262757474222073746f6b652d6c696e656a6f696e3d226d69746572222066696c6c3d2223303030303030223e3c7376672077696474683d2238303022206865696768743d223630302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b222076696577426f783d223020302038303020363030223e3c673e666f6e742d66616d696c793d2248656c7665746963612220666f6e742d7765696768743d22626f6c642220666f6e742d73697a653d2231303022207374726f6b652d77696474683d2230222069643d227376675f312220793d223537382e36313139342220783d223631372e323736383122207374726f6b653d2223303030222066696c6c3d22233c74657874207472616e73666f726d3d226d617472697828322e313130322c20302c20302c20322e36382c202d313036392e38322c202d313137372e3638292220786d6c3a73706163653d2270726573657276652220746578742d616e63686f723d2273746172742220a2646970667358221220712e8f7b129d423ef92bdda7c692532e291e4fb27374364f95157f7004f1d39764736f6c63430008040033",
  "devdoc": {
    "author": ":   @ bretth18 / @ computerdata",
    "details": ":   This contract requires you to say GM before minting.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": ":   \"GMPass\"",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "______   __       __  _______                               /      \\ /  \\     /  |/       \\                              /$$$$$$  |$$  \\   /$$ |$$$$$$$  | ______    _______  _______  $$ | _$$/ $$$  \\ /$$$ |$$ |__$$ |/      \\  /       |/       | $$ |/    |$$$$  /$$$$ |$$    $$/ $$$$$$  |/$$$$$$$//$$$$$$$/  $$ |$$$$ |$$ $$ $$/$$ |$$$$$$$/  /    $$ |$$      \\$$      \\  $$ \\__$$ |$$ |$$$/ $$ |$$ |     /$$$$$$$ | $$$$$$  |$$$$$$  | $$    $$/ $$ | $/  $$ |$$ |     $$    $$ |/     $$//     $$/  $$$$$$/  $$/      $$/ $$/       $$$$$$$/ $$$$$$$/ $$$$$$$/   ------------------------------------------------------------------------------------------------- \"GMPass\"                :   ERC-721 for saying gm ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1158,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1160,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1164,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1168,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1172,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1178,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2097,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2101,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2104,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2108,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3495,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "gms",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3499,
        "contract": "contracts/GMPass.sol:GMPass",
        "label": "gmsSaidBack",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}